/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ModelicaSimulation;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import ModelicaSimulation.RoboterSimulations.Robot;
import at.tugraz.ist.compiler.interpreter.BestPlanFinder;
import rule.Executor;
import at.tugraz.ist.compiler.interpreter.NoPlanFoundException;
import at.tugraz.ist.compiler.rule.Predicate;


public class App {

    public static void main(String[] args) {

        double startTime = 0; 
        double stopTime = 30;
        int steps = 1000;

        List<Double> percantageWithout = new ArrayList<>();
        List<Double> percantageWith = new ArrayList<>();

        List<Double> distanceWithout = new ArrayList<>();
        List<Double> distanceWith = new ArrayList<>();

        String[] FMUs = {"PowerTrainDoubleKineticsStandalone.fmu",
                        "PowerTrainDoubleKineticsStandaloneA.fmu",
                        "PowerTrainDoubleKineticsStandaloneB.fmu",
                        "PowerTrainDoubleKineticsStandaloneC.fmu"};

        System.out.println("Starting Simulation without RBL rules");
        Robot.getInstance().initilizeSimulation("FMUs" + File.separator + FMUs[0], startTime, stopTime, steps);

        System.out.println("Starting Simulation for " + FMUs[0] + "...");
        for (int i = 0; i < steps; i++) {
            Robot.getInstance().driveNormal();
        }
        
        percantageWithout.add(Robot.getInstance().ticksStraigth / (steps * 1.0) * 100);
        distanceWithout.add(Robot.getInstance().deviationFromY);

        System.out.println("\u001B[32mSimulation finished: Steps straight: " + Robot.getInstance().ticksStraigth + 
            " %:" + Robot.getInstance().ticksStraigth / (steps * 1.0) * 100 + 
            " Deviation from Y:" + Robot.getInstance().deviationFromY + "\u001B[0m\n");
        

        Double ideal_x = Robot.getInstance().getXPos();
        Double ideal_y = Robot.getInstance().getYPos();

        System.out.println("Starting Simulation with RBL rules");
        float total_percentages = 0;
        Double totalDistanceFromIdeal = 0.0;
        for (String FMU : FMUs) {
            Robot.getInstance().initilizeSimulation("FMUs" + File.separator + FMU, startTime, stopTime, steps);
    
            System.out.println("Starting Simulation for " + FMU + "...");
            try {
                Executor executor = new Executor(new BestPlanFinder());
                executor.executeNTimes(steps);
            } catch (ClassNotFoundException e) {
                assert false;
            } catch (NoPlanFoundException e) {
                e.printStackTrace();
            }

            total_percentages += Robot.getInstance().ticksStraigth / (steps * 1.0) * 100;
            percantageWith.add(Robot.getInstance().ticksStraigth / (steps * 1.0) * 100);
            distanceWith.add(Robot.getInstance().deviationFromY);
            Double distanceFromIdeal = Math.sqrt(Math.pow(Robot.getInstance().getXPos() - ideal_x, 2) + Math.pow(Robot.getInstance().getYPos() - ideal_y, 2));
            totalDistanceFromIdeal += distanceFromIdeal;

            System.out.println("\u001B[32mSimulation finished: Steps straight: " + Robot.getInstance().ticksStraigth + 
                " %:" + Robot.getInstance().ticksStraigth / (steps * 1.0) * 100 + 
                " Deviation from Y:" + Robot.getInstance().deviationFromY + 
                " Deviation from ideal:" + distanceFromIdeal + "\u001B[0m\n");
        }

        System.out.println("Avg Percentages: " + total_percentages / 4);
        System.out.println("Total distance from ideal: " + totalDistanceFromIdeal);
    }
}
